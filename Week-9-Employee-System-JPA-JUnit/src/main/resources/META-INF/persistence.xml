<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<persistence version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
  <persistence-unit name="EmployeeSystem-PU" transaction-type="RESOURCE_LOCAL">
    <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
    <properties>
    
    
      <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>
      <property name="javax.persistence.schema-generation.create-source" value="metadata"/>
      <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/employeesystem?createDatabaseIfNotExist=true&amp;zeroDateTimeBehavior=convertToNull"/>
      <property name="javax.persistence.jdbc.user" value="cst8277"/>
      <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
      <property name="javax.persistence.jdbc.password" value="8277"/>
      <property name="hibernate.connection.autocommit" value="true"/>
      <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL8Dialect"/>
      <property name="hibernate.format_sql" value="true"/>
      <property name="hibernate.use_sql_comments" value="true"/>

      <!--     
      <property name="javax.persistence.jdbc.driver" value="org.h2.Driver" />
      <property name="javax.persistence.jdbc.url" value="jdbc:h2:mem:emp" />
      <property name="javax.persistence.jdbc.user" value="sa" />
      <property name="javax.persistence.jdbc.password" value="password" />
      <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
      <property name="hibernate.connection.autocommit" value="true"/>
      <property name="hibernate.show_sql" value="true"/>
      <property name="hibernate.format_sql" value="true"/>
      <property name="hibernate.hbm2ddl.import_files_sql_extractor" value="org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor" />
      -->
      
      <!-- javax.persistence.schema-generation.database.action replaces hibernate.hbm2ddl.auto (sorta)
        
       Possible values:
        "none":            No schema creation or deletion will take place
        "create":          Creates the schema necessary for your entities.
                         The artifacts will remain unchanged after application redeployment.
        "drop-and-create": Any artifacts in the database will be deleted, and the provider will
                         create the database artifacts on deployment.
        "drop":            Any artifacts in the database will be deleted on application deployment.
      -->
      <!-- property name="javax.persistence.schema-generation.database.action" value="create"/> -->
      <!--
        How are schema's created or dropped? Some options ...
         property = javax.persistence.schema-generation.create-source  and/or
                    javax.persistence.schema-generation.drop-source
         Possible values:           
          "metadata": Use the object/relational Annotation metadata to create or drop database artifacts
          "script":   Use the user-provided script to create or drop database artifacts
          "metadata-then-script": (combination) Use the metadata, then the user-provided script
          "script-then-metadata": (combination) Use the user-provided script, then metadata
      
        Where are the scripts found? Location is relative to the persistence root folder
        
         property = javax.persistence.schema-generation.create-script-source  and/or
                    javax.persistence.schema-generation.drop-script-source
        For example: "META-INF/sql/users-createDDL.sql"  or
                     "META-INF/sql/users-dropDDL.sql"
        src
        ├── main/
        │   ├── java/
        │   │   └── com/
        │   │       ...
        │   │           
        │   └── resources/
        │       ├── META-INF/
        │       │   └── persistence.xml 
        │       └── sql/
        │           ├── users-createDDL.sql
        │           └── users-dropDDL.sql
        │ ...
      
        -->
        
        <!-- 
      <property name="javax.persistence.schema-generation.create-source" value="script"/>
      <property name="javax.persistence.schema-generation.create-script-source" value="META-INF/sql/employeeSystem-create.sql" />
      -->
      
      <!-- Note: because we are using the H2 database's in-memory driver (jdbc:h2:mem),
           the database no longer exists the JVM exits, so we don't really need drop-script-source
      -->
    </properties>
  </persistence-unit>
</persistence>
