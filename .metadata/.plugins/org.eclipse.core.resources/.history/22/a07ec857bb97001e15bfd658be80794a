package acmecollege.ejbs;

import acmecollege.util.MyQueriesConstants;
import static acmecollege.util.MyConstants.*;

import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.ejb.Singleton;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.security.enterprise.identitystore.Pbkdf2PasswordHash;
import javax.transaction.Transactional;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import acmecollege.entity.*;

@SuppressWarnings("unused")
@Singleton
public class ACMECollegeService implements Serializable {
    private static final long serialVersionUID = 1L;
    
    private static final Logger LOG = LogManager.getLogger();
    
    @PersistenceContext(name = PU_NAME)
    protected EntityManager em;
    
    @Inject
    protected Pbkdf2PasswordHash pbAndjPasswordHash;

    public List<Student> getAllStudents() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Student> cq = cb.createQuery(Student.class);
        cq.select(cq.from(Student.class));
        return em.createQuery(cq).getResultList();
    }

    public Student getStudentById(int id) {
        return em.find(Student.class, id);
    }

   
    @Transactional
    public Student persistStudent(Student newStudent) {
        em.persist(newStudent);
        return newStudent;
    }

    @Transactional
    public void buildUserForNewStudent(Student newStudent) {
        SecurityUser userForNewStudent = new SecurityUser();
        userForNewStudent.setUsername(
            DEFAULT_USER_PREFIX + "_" + newStudent.getFirstName() + "." + newStudent.getLastName());
        Map<String, String> pbAndjProperties = new HashMap<>();
        pbAndjProperties.put(PROPERTY_ALGORITHM, DEFAULT_PROPERTY_ALGORITHM);
        pbAndjProperties.put(PROPERTY_ITERATIONS, DEFAULT_PROPERTY_ITERATIONS);
        pbAndjProperties.put(PROPERTY_SALT_SIZE, DEFAULT_SALT_SIZE);
        pbAndjProperties.put(PROPERTY_KEY_SIZE, DEFAULT_KEY_SIZE);
        pbAndjPasswordHash.initialize(pbAndjProperties);
        String pwHash = pbAndjPasswordHash.generate(DEFAULT_USER_PASSWORD.toCharArray());
        userForNewStudent.setPwHash(pwHash);
        userForNewStudent.setStudent(newStudent);
        SecurityRole userRole =
        		em.<SecurityRole>createNamedQuery(MyQueriesConstants.SECURITY_ROLE_FIND_ALL, SecurityRole.class)
        		.setParameter(PARAM1, "USER_ROLE").getSingleResult();
        
        userForNewStudent.getRoles().add(userRole);
        userRole.getUsers().add(userForNewStudent);
        em.persist(userForNewStudent);
    }

    @Transactional
    public Professor setProfessorForStudentCourse(int studentId, int courseId, Professor newProfessor) {
        Student studentToBeUpdated = em.find(Student.class, studentId);
        if (studentToBeUpdated != null) { // Student exists
            Set<CourseRegistration> courseRegistrations = studentToBeUpdated.getCourseRegistrations();
            courseRegistrations.forEach(c -> {
                if (c.getCourse().getId() == courseId) {
                    if (c.getProfessor() != null) { // Professor exists
                        Professor prof = em.find(Professor.class, c.getProfessor().getId());
                        prof.setProfessor(newProfessor.getFirstName(),
                        				  newProfessor.getLastName(),
                        				  newProfessor.getDepartment());
                        em.merge(prof);
                    }
                    else { // Professor does not exist
                        c.setProfessor(newProfessor);
                        em.merge(studentToBeUpdated);
                    }
                }
            });
            return newProfessor;
        }
        else return null;  // Student doesn't exists
    }

    /**
     * To update a student
     * 
     * @param id - id of entity to update
     * @param studentWithUpdates - entity with updated information
     * @return Entity with updated information
     */
    @Transactional
    public Student updateStudentById(int id, Student studentWithUpdates) {
        Student studentToBeUpdated = getStudentById(id);
        if (studentToBeUpdated != null) {
            em.refresh(studentToBeUpdated);
            em.merge(studentWithUpdates);
            em.flush();
        }
        return studentToBeUpdated;
    }

    /**
     * To delete a student by id
     * 
     * @param id - student id to delete
     */
    @Transactional
    public void deleteStudentById(int id) {
        Student student = getStudentById(id);
        if (student != null) {
            em.refresh(student);
            TypedQuery<SecurityUser> findUser = 
                /* TODO ACMECS02 - Use NamedQuery on SecurityRole to find this related Student
                   so that when we remove it, the relationship from SECURITY_USER table
                   is not dangling
                */ 
            		em.<SecurityUser>createNamedQuery(MyQueriesConstants.SECURITY_USER_FIND_BY_STUDENT_ID, SecurityUser.class)
            		.setParameter("studentId", id);
            
            SecurityUser sUser = findUser.getSingleResult();
            /*
            TypedQuery<MembershipCard> studentcard = em.<MembershipCard>createNamedQuery("MembershipStudent", MembershipCard.class)
            		.setParameter("studentId", id);
            
            TypedQuery<CourseRegistration> studentreg= em.<CourseRegistration>createNamedQuery("CourseStudent", CourseRegistration.class)
            		.setParameter("studentId", id);
            
            List<MembershipCard> Scard = studentcard.getResultList();
            List<CourseRegistration> Scourse = studentreg.getResultList();
            
            for (CourseRegistration cr : Scourse) {
            	
                em.remove(cr);
            }
            
            for(MembershipCard Mr : Scard)
            {
            	em.remove(Mr);
            }
            */
          // em.remove(Scourse);
          // em.remove(Scard);
            
            
            em.remove(sUser);
            em.remove(student);
        }
    }
    
    public List<StudentClub> getAllStudentClubs() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<StudentClub> cq = cb.createQuery(StudentClub.class);
        cq.select(cq.from(StudentClub.class));
        return em.createQuery(cq).getResultList();
    }

    // Why not use the build-in em.find?  The named query SPECIFIC_STUDENT_CLUB_QUERY_NAME
    // includes JOIN FETCH that we cannot add to the above API
    public StudentClub getStudentClubById(int id) {
        TypedQuery<StudentClub> specificStudentClubQuery = em.createNamedQuery(MyQueriesConstants.STUDENT_CLUB_FIND_BY_NAME, StudentClub.class);
        specificStudentClubQuery.setParameter(PARAM1, id);
        return specificStudentClubQuery.getSingleResult();
    }
    
    // These methods are more generic.

    public <T> List<T> getAll(Class<T> entity, String namedQuery) {
        TypedQuery<T> allQuery = em.createNamedQuery(namedQuery, entity);
        return allQuery.getResultList();
    }
    
    public <T> T getById(Class<T> entity, String namedQuery, int id) {
        TypedQuery<T> allQuery = em.createNamedQuery(namedQuery, entity);
        allQuery.setParameter(PARAM1, id);
        return allQuery.getSingleResult();
    }

    @Transactional
    public StudentClub deleteStudentClub(int id) {
        //StudentClub sc = getStudentClubById(id);
    	StudentClub sc = getById(StudentClub.class, MyQueriesConstants.STUDENT_CLUB_FIND_BY_NAME, id);
        if (sc != null) {
            Set<ClubMembership> memberships = sc.getClubMemberships();
            List<ClubMembership> list = new LinkedList<>();
            memberships.forEach(list::add);
            list.forEach(m -> {
                if (m.getCard() != null) {
                    MembershipCard mc = getById(MembershipCard.class, MyQueriesConstants.MEMBERSHIP_CARD_FIND_BY_ID, m.getCard().getId());
                    mc.setClubMembership(null);
                }
                m.setCard(null);
                em.merge(m);
            });
            em.remove(sc);
            return sc;
        }
        return null;
    }
    
    // Please study & use the methods below in your test suites
    
    public boolean isDuplicated(StudentClub newStudentClub) {
        TypedQuery<Long> allStudentClubsQuery = em.createNamedQuery(MyQueriesConstants.STUDENT_CLUB_IS_DUPLICATE, Long.class);
        allStudentClubsQuery.setParameter(PARAM1, newStudentClub.getName());
        return (allStudentClubsQuery.getSingleResult() >= 1);
    }

    @Transactional
    public StudentClub persistStudentClub(StudentClub newStudentClub) {
        em.persist(newStudentClub);
        return newStudentClub;
    }

    @Transactional
    public StudentClub updateStudentClub(int id, StudentClub updatingStudentClub) {
    	StudentClub studentClubToBeUpdated = getStudentClubById(id);
        if (studentClubToBeUpdated != null) {
            em.refresh(studentClubToBeUpdated);
            studentClubToBeUpdated.setName(updatingStudentClub.getName());
            em.merge(studentClubToBeUpdated);
            em.flush();
        }
        return studentClubToBeUpdated;
    }
    
    @Transactional
    public ClubMembership persistClubMembership(ClubMembership newClubMembership) {
        em.persist(newClubMembership);
        return newClubMembership;
    }

    public ClubMembership getClubMembershipById(int cmId) {
        TypedQuery<ClubMembership> allClubMembershipQuery = em.createNamedQuery(MyQueriesConstants.CLUB_MEMBERSHIP_FIND_BY_ID, ClubMembership.class);
        allClubMembershipQuery.setParameter(PARAM1, cmId);
        return allClubMembershipQuery.getSingleResult();
    }

    @Transactional
    public ClubMembership updateClubMembership(int id, ClubMembership clubMembershipWithUpdates) {
    	ClubMembership clubMembershipToBeUpdated = getClubMembershipById(id);
        if (clubMembershipToBeUpdated != null) {
            em.refresh(clubMembershipToBeUpdated);
            em.merge(clubMembershipWithUpdates);
            em.flush();
        }
        return clubMembershipToBeUpdated;
    }
    
  // new methods for Club Membership Resource
    public List<ClubMembership> getAllClubMembership() {
        TypedQuery<ClubMembership> allCardsQuery = em.createNamedQuery(MyQueriesConstants.CLUB_MEMBERSHIP_FIND_ALL, ClubMembership.class);
        return allCardsQuery.getResultList();
        
       
    }

    @Transactional
    public void deleteClubMembershipById(int id) {

        ClubMembership newClubMembership = getById(ClubMembership.class, MyQueriesConstants.CLUB_MEMBERSHIP_FIND_BY_ID, id);
        if (newClubMembership != null) {
            em.remove(newClubMembership);
        }
    }
    
    
    // new methods for Membership card
    @Transactional
    public void deleteCardById(int cardId) {
        MembershipCard card = getById(MembershipCard.class, MyQueriesConstants.MEMBERSHIP_CARD_FIND_BY_ID, cardId);
        if (card != null) {
            em.remove(card);
        }
    }
        
        @Transactional
        public MembershipCard persistCard(MembershipCard newCard) {
            em.persist(newCard);
            return newCard;
        }

        public List<MembershipCard> getAllCards() {
          TypedQuery<MembershipCard> allCardsQuery = em.createNamedQuery(MyQueriesConstants.MEMBERSHIP_CARD_FIND_ALL, MembershipCard.class);
          return allCardsQuery.getResultList();
        	
          // CriteriaBuilder cb = em.getCriteriaBuilder();
         //  CriteriaQuery<MembershipCard> cq = cb.createQuery(MembershipCard.class);
         //  cq.select(cq.from(MembershipCard.class));
         //  return em.createQuery(cq).getResultList();
        }

        public MembershipCard getCardById(int membershipId){
            //TypedQuery<MembershipCard> idQuery = em.createNamedQuery(MembershipCard.ID_CARD_QUERY_NAME , MembershipCard.class);
            //idQuery.setParameter(PARAM1,membershipId);
            //MembershipCard cardById = idQuery.getSingleResult();
            //return cardById;
        	return em.find(MembershipCard.class, membershipId);

    }

        @Transactional
        public MembershipCard updateMembershipCardById(int cardId, MembershipCard updatingMembershipCard) {
            MembershipCard CardToBeUpdated = getCardById(cardId);
            if (CardToBeUpdated != null) {
                em.refresh(CardToBeUpdated);
                CardToBeUpdated.setClubMembership(updatingMembershipCard.getClubMembership());
                em.merge(CardToBeUpdated);
                em.flush();
            }
            return CardToBeUpdated;
        }
        
        // new methods for course registration.
        public List<CourseRegistration> getAllRegistration() {
            TypedQuery<CourseRegistration> allCardsQuery = em.createNamedQuery("CourseRegistration.findAll", CourseRegistration.class);
            return allCardsQuery.getResultList();
        }

        @Transactional
        public CourseRegistration persistCourseRegistration(CourseRegistration newCourseRegistration) {
            em.persist(newCourseRegistration);
            return newCourseRegistration;
        }

        public CourseRegistration getCourseRegistrationById(int studentId) {
            TypedQuery<CourseRegistration> allQuery = em.createNamedQuery("CourseRegistration.findStudent", CourseRegistration.class);
            allQuery.setParameter(PARAM1, studentId);
           
            return allQuery.getSingleResult();
        }
        public CourseRegistration getCourseRegistrationById(int studentId, int courseId) {
            TypedQuery<CourseRegistration> allQuery = em.createNamedQuery("CourseRegistration.findById", CourseRegistration.class);
            allQuery.setParameter(PARAM1, studentId);
            allQuery.setParameter("param2", courseId);
            return allQuery.getSingleResult();
        }

        @Transactional
        public void deleteCourseRegistrationById(int studentId, int courseId) {

            CourseRegistration resultCourseRegistration = getCourseRegistrationById(studentId, courseId);
            if (resultCourseRegistration != null) {
                em.remove(resultCourseRegistration);
            }
        }
        
        //New Methods for Professor
        public Professor getProfessorById(int id) {
            TypedQuery<Professor> specificProfessorQuery = em.createNamedQuery(MyQueriesConstants.PROFESSOR_FIND_BY_ID, Professor.class);
            specificProfessorQuery.setParameter(PARAM1, id);
            return specificProfessorQuery.getSingleResult();
        }

        @Transactional
        public Professor persistProfessor(Professor newProfessor) {
            em.persist(newProfessor);
            return newProfessor;
        }

        @Transactional
        public Professor deleteProfessorById(int id) {
            Professor professor = getProfessorById(id);
            if (professor != null) {
                em.remove(professor);
                return professor;
            }
            return null;
        }
    
        //New methods for course 
        
        
        
        
        
        @Transactional
        public void deleteCourseById(int courseId) {
            Course course = getById(Course.class, MyQueriesConstants.COURSE_FIND_BY_ID, courseId);
            if (course != null) {
                em.remove(course);
            }
        }

        @Transactional
        public Course persistCourse(Course newCourse) {
            em.persist(newCourse);
            return newCourse;
        }

        public List<Course> getAllCourses() {
            TypedQuery<Course> allCoursesQuery = em.createNamedQuery(MyQueriesConstants.COURSE_FIND_ALL, Course.class);
            return allCoursesQuery.getResultList();
        }

        public Course getCourseById(int courseId) {
            TypedQuery<Course> courseByIdQuery = em.createNamedQuery(MyQueriesConstants.COURSE_FIND_BY_ID, Course.class);
            courseByIdQuery.setParameter("param1", courseId);
            List<Course> courses = courseByIdQuery.getResultList();
            return courses.isEmpty() ? null : courses.get(0);
        }
        
   }